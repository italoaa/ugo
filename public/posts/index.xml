<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Italo Amaya</title>
    <link>//italoamaya.me/posts/</link>
    <description>Recent content in Posts on Italo Amaya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Sep 2022 00:00:00 +0100</lastBuildDate><atom:link href="//italoamaya.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning OpenGl - Creating a Window</title>
      <link>//italoamaya.me/posts/learning_opengl-creating_a_window/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0100</pubDate>
      
      <guid>//italoamaya.me/posts/learning_opengl-creating_a_window/</guid>
      <description>GLFW This is a library that allows us to facilitate the process of creating a window defining the context to of opengl and handle the user input.
Gl instead of GLAD This is a library that&amp;rsquo;s has the purpose of being the opengl function pointer loader.
Initialize glfw This is how we are initializing glfw to create the opengl context.
// glfw: initialize and configure // ------------------------------ let mut glfw = glfw::init(glfw::FAIL_ON_ERRORS).</description>
    </item>
    
    <item>
      <title>Learning OpenGl</title>
      <link>//italoamaya.me/posts/learning_opengl/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0100</pubDate>
      
      <guid>//italoamaya.me/posts/learning_opengl/</guid>
      <description>What resources I am using At the moment I am starting with Learn_OpenGl_rust and am planing on using this resource for this entire learning process.
Introduction As I understand the opengl library started out with the immediate mode. This mode was easy to use and made the idea of drawing graphics way easier. But it was inefficient, which resulted in opengl developing the core-profile mode which is what is being used now.</description>
    </item>
    
    <item>
      <title>Adding_cowsay_to_ssh</title>
      <link>//italoamaya.me/posts/adding_cowsay_to_ssh/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0100</pubDate>
      
      <guid>//italoamaya.me/posts/adding_cowsay_to_ssh/</guid>
      <description>Install Packages sudo apt update &amp;amp;&amp;amp; sudo apt upgrade sudo apt install cowsay fortune Create the RC The following Bash commands will be run everytime you log in to ssh. The commands need to be added to ~/.ssh/rc.
#!/bin/bash clear echo &amp;#34;&amp;#34; fortune | cowsay -cowsay -f $(ls /usr/share/cowsay/cows/ | shuf -n 1) echo &amp;#34;$(uptime)&amp;#34; echo &amp;#34;&amp;#34; Source : original post</description>
    </item>
    
    <item>
      <title>Setting_up_shh</title>
      <link>//italoamaya.me/posts/setting_up_shh/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 -0500</pubDate>
      
      <guid>//italoamaya.me/posts/setting_up_shh/</guid>
      <description>What is SSH This is the main protocol for communicating with your server so make sure is properly set up. For me the most important aspect to add is SSH-keys. This are like files in your system that are used to authenticate with the server. This is used instead of a password.
How to configure SSH Config File The following config are some of my definitive.
This is in /etc/ssh/sshd_config</description>
    </item>
    
    <item>
      <title>Setting_up_ssl__nginx</title>
      <link>//italoamaya.me/posts/setting_up_ssl__nginx/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 -0500</pubDate>
      
      <guid>//italoamaya.me/posts/setting_up_ssl__nginx/</guid>
      <description>What is ssl? This step enables the visitor to come to the website on a secure connection.
Install certbot apt install python3-certbot-nginx Run the cerbot installation It will ask for which domain to enable the https. Domain is required Go throug the installation and check for the https in your browser
certbot --nginx Automatic certificate renewal crontab -e and add this to the end
0 0 1 * * certbot --nginx renew </description>
    </item>
    
    <item>
      <title>Setting_up_nginx</title>
      <link>//italoamaya.me/posts/setting_up_nginx/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0100</pubDate>
      
      <guid>//italoamaya.me/posts/setting_up_nginx/</guid>
      <description>Nginx Install This is the web server that will handle all http/s connections.
sudo apt install nginx Configuration Decide on a name for the nginx configuration and create a new config for nginx. In case you are not familiar with nginx the configurations of the web server go inside /etc/nginx/sites-available/. The sites available directory is used to store the configurations. To enable the configurations you can symlink then to the /etc/nginx/sites-enabled/ directory.</description>
    </item>
    
    <item>
      <title>Setting_up_ssl_nginx</title>
      <link>//italoamaya.me/posts/setting_up_ssl_nginx/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0100</pubDate>
      
      <guid>//italoamaya.me/posts/setting_up_ssl_nginx/</guid>
      <description>What is ssl? This step enables the visitor to come to the website on a secure connection.
Install certbot apt install python3-certbot-nginx Run the cerbot installation It will ask for which domain to enable the https. Domain is required Go throug the installation and check for the https in your browser
certbot --nginx Automatic certificate renewal crontab -e and add this to the end
0 0 1 * * certbot --nginx renew </description>
    </item>
    
    <item>
      <title>Starting with reverse engineering</title>
      <link>//italoamaya.me/posts/starting_with_reverse_engineering/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 -0500</pubDate>
      
      <guid>//italoamaya.me/posts/starting_with_reverse_engineering/</guid>
      <description>What tools I use I started out with ghidra and found that rather slow and slugish. I am a big emacs and vim user so efficiency is a must. Luckily I knew about radare2. Radare2 is a command line tool to disassemble and reverse binaries plus much much more. I found that radare was easier to use for small binaries like the ones from crackmes.
Resources In my opinion LiveOverflow playlist on binary exploitation is amazing and as a bigginer is a great place.</description>
    </item>
    
    <item>
      <title>Setting_up_hugo</title>
      <link>//italoamaya.me/posts/setting_up_hugo/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 -0500</pubDate>
      
      <guid>//italoamaya.me/posts/setting_up_hugo/</guid>
      <description>Hugo Now that I have a server I started to play around with the site generation of hugo. It can be a bit complicated If you are using emacs and org mode like me so I will divide this explanation in to three parts: Ox-Hugo (You can skip this if you are using only md), Content Organization and Configurations.
Set up hugo Download hugo You are going to want to install hugo in your personal machine apart from your server.</description>
    </item>
    
    <item>
      <title>Creating this site</title>
      <link>//italoamaya.me/posts/creating_this_site/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0100</pubDate>
      
      <guid>//italoamaya.me/posts/creating_this_site/</guid>
      <description>Disclaimer Most of the information here is taken from the tutorial in Land Chad check them out!
Introduction and process. This is the process I went through while making this same website. At first I tried to make a basic html and css website but my design skills where not enough. I also considered using Hugo because I use org mode almost daily and there is a package called ox-hugo, which makes transformation of the org-mode syntax into the markdown for hugo simple.</description>
    </item>
    
  </channel>
</rss>
